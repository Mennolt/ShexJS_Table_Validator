#!/usr/bin/env node

// json-to-shex https://raw.githubusercontent.com/shexSpec/shexTest/main/parsedSchemas/open2dotOr1dotclose.json

const ShExUtil = require("@shexjs/util");
const N3 = require("n3");
const ShExNode = require("@shexjs/node")({
  rdfjs: N3,
  fetch: require('node-fetch'),
  jsonld: require('jsonld'),
});
const ExitCode = require('../lib/ExitCode')
const SchemaOptions = {
  index: true,
  collisionPolicy: ShExUtil.warnDuplicates,
};
const ShExWriter = require("@shexjs/writer"); // for verbose output

// Generate command line interface
const CommandLineOptions = [
    { name: "help",  alias: "h", type: Boolean },
    { name: "shex",  alias: "x", type: String, multiple:  true, defaultValue:   [] },
    { name: "json",  alias: "j", type: String, multiple:  true, defaultValue:   [], defaultOption:  true },
    { name: "turtle",alias: "t", type: String, multiple:  true, defaultValue:   [] },
    { name: "prefixes",          type: String, multiple:  true, defaultValue:   [] }
];
try {
  CLI = require("command-line-args")(CommandLineOptions);
} catch (e) {
  abort(e.message, ExitCode.bad_argument);
}
function abort (msg, exitCode) {
  const output = exitCode === ExitCode.help ? console.log : console.error;
  output(msg);
  output(require('command-line-usage')([
    {
      header: "json-to-shex",
      content: "load some number of schema files from web or filesystem and display as ShEx compact syntax (ShExC), for example:\n    shex-to-json https://raw.githubusercontent.com/shexSpec/shexTest/main/parsedSchemas/open2dotOr1dotclose.json" },
    {
      header: 'Options',
      optionList: CommandLineOptions
    },
    {
      content: "Project home: " + require('chalk').underline("https://github.com/shexSpec/shex.js")
    }
  ]));
  process.exit(exitCode);
}

// Extract user commands
const cmds = CLI;
if (cmds.help)
  abort("", ExitCode.help);
if (cmds.turtle.length > 0) {
  const validator = require("@shexjs/validator");
  const schema = require(/*"shexr-schema"*/ "../lib/ShExR.cjs.js");
  const rdfjsdb = require("@shexjs/neighborhood-rdfjs").ctor;
  SchemaOptions.graphParser = { validator, schema, rdfjsdb };
} else if ([].concat(cmds.shex).concat(cmds.json).length === 0) {
  abort("no shex specified", ExitCode.bad_argument);
}

let options = { simplifyParentheses: true };
if (cmds.prefixes.length > 0) {
  let prefixes = cmds.prefixes.reduce(
    (pz, decl) => Object.assign(pz, JSON.parse(decl)), {}
  )
  options.prefixes = prefixes;
}


ShExNode.load({shexc: cmds.shex, json: cmds.json, turtle: cmds.turtle}, null, SchemaOptions).then(function (loaded) {
  new ShExWriter(null, options).
    writeSchema(loaded.schema,
                function (error, text, prefixes) {
                  if (error) throw error;
                  else if (text) console.log(text);
                });
  return ExitCode.shexc_pass
}, function (e) {
  let exitCode;
  if (e instanceof ShExNode.WebError) {
    exitCode = ExitCode.resource_not_found;
    console.error("Resource error:", e.message);
  } else if (e instanceof Error) {
    if (e.origError) {
      e = e.origError;
    }
    exitCode = e.code === "ENOENT"
      ? ExitCode.file_not_found
      : ExitCode.unspecified_error;
    console.error(e.stack);
  } else {
    exitCode = ExitCode.unspecified_error;
    console.error("Aborting:", e);
    e = Error(e);
  }
  return exitCode;
}).then(function (ret) {
  process.on('exit', function() { process.exit(ret); });
});
