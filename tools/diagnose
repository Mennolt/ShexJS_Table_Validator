#!/usr/bin/env node

// diagnose errors in trees of imported schemas

const ShExTerm = require("@shexjs/term");
const {StoreDuplicates, yyllocToString} = require("@shexjs/util/lib/Merger");
const ShExNode = require("@shexjs/node")({  });
const StoreDuplicatesInstance = new StoreDuplicates();

class ProgressLoadControler extends ShExNode.ResourceLoadControler {
  // constructor (src) {
  //   super(src);
  // }
  add (promise) {
    process.stdout.cursorTo(0);
    process.stdout.write(`Loaded ${this.toLoad.length} of ${this.schemasSeen.length} imports.`); // TODO: add redefinitions: ${Object.keys(StoreDuplicatesInstance.duplicates).length}
    super.add(promise);
  }
  allLoaded () {
    return super.allLoaded().then(x => {
      process.stdout.clearLine();
      process.stdout.cursorTo(0);
      process.stdout.write(`Loaded ${this.toLoad.length} imports`);
      return x;
    });
  }
}

const shexc = [process.argv[2]];
const errors = [];
const SchemaOptions = {
  index: true,
  collisionPolicy: StoreDuplicatesInstance,
  loadController: new ProgressLoadControler(shexc),
  missingReferent: (error, yylloc) => { errors.push({error, yylloc}); },
  skipCycleCheck: true,
};
ShExNode.load({shexc}, null, SchemaOptions).then(function (loaded) {
  const redefined = Object.keys(StoreDuplicatesInstance.duplicates);
  process.stdout.write(`, found ${Object.keys(redefined).length} redefinitions, ${errors.length} errors.\n`);
  if (redefined.length > 0) {
    console.log(`${redefined.length} Redefinitions:`);
    redefined.forEach(id => {
      const llocs = StoreDuplicatesInstance.duplicates[id];
      console.log('  %s: %d defintions:%s', ShExTerm.shExJsTerm2Turtle(id), llocs.length, llocs.map(yylloc => "\n    " + yyllocToString(yylloc)).join(""));
    });
  }
  console.log(`${errors.length} Errors:\n%s`, errors.map(({error, yylloc}) => `  ${yylloc ? yyllocToString(yylloc) : ""}\n    ${error}`).join("\n"));
})
